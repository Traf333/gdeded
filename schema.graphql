directive @embedded on OBJECT

directive @collection(name: String!) on OBJECT

directive @index(name: String!) on FIELD_DEFINITION

directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION

directive @relation(name: String) on FIELD_DEFINITION

directive @unique(index: String) on FIELD_DEFINITION

scalar Date

type Mutation {
  # Delete an existing document in the collection of 'Speech'
  deleteSpeech(
    # The 'Speech' document's ID
    id: ID!
  ): Speech

  # Create a new document in the collection of 'Speech'
  createSpeech(
    # 'Speech' input values
    data: SpeechInput!
  ): Speech!

  # Update an existing document in the collection of 'Speech'
  updateSpeech(
    # The 'Speech' document's ID
    id: ID!

    # 'Speech' input values
    data: SpeechInput!
  ): Speech

  # Update an existing document in the collection of 'Scenario'
  updateScenario(
    # The 'Scenario' document's ID
    id: ID!

    # 'Scenario' input values
    data: ScenarioInput!
  ): Scenario

  # Create a new document in the collection of 'Scenario'
  createScenario(
    # 'Scenario' input values
    data: ScenarioInput!
  ): Scenario!

  # Partially updates an existing document in the collection of 'Scenario'. It only modifies the values that are specified in the arguments. During execution, it verifies that required fields are not set to 'null'.
  partialUpdateScenario(
    # The 'Scenario' document's ID
    id: ID!

    # 'Scenario' input values
    data: PartialUpdateScenarioInput!
  ): Scenario

  # Delete an existing document in the collection of 'Scenario'
  deleteScenario(
    # The 'Scenario' document's ID
    id: ID!
  ): Scenario

  # Partially updates an existing document in the collection of 'Speech'. It only modifies the values that are specified in the arguments. During execution, it verifies that required fields are not set to 'null'.
  partialUpdateSpeech(
    # The 'Speech' document's ID
    id: ID!

    # 'Speech' input values
    data: PartialUpdateSpeechInput!
  ): Speech
}

# 'Scenario' input values
input PartialUpdateScenarioInput {
  title: String
  description: String
  roles: [String]
  active: Boolean
  author: String
  speeches: ScenarioSpeechesRelation
}

# 'Speech' input values
input PartialUpdateSpeechInput {
  text: String
  audios: [String!]
  scenario: SpeechScenarioRelation
}

# 'Scenario' input values
input ScenarioInput {
  title: String!
  description: String
  roles: [String]
  active: Boolean
  author: String
  speeches: ScenarioSpeechesRelation
}

# Allow manipulating the relationship between the types 'Scenario' and 'Speech'.
input ScenarioSpeechesRelation {
  # Create one or more documents of type 'Speech' and associate them with the current document.
  create: [SpeechInput]

  # Connect one or more documents of type 'Speech' with the current document using their IDs.
  connect: [ID]

  # Disconnect the given documents of type 'Speech' from the current document using their IDs.
  disconnect: [ID]
}

# 'Speech' input values
input SpeechInput {
  text: String!
  audios: [String!]
  scenario: SpeechScenarioRelation
}

# Allow manipulating the relationship between the types 'Speech' and 'Scenario' using the field 'Speech.scenario'.
input SpeechScenarioRelation {
  # Create a document of type 'Scenario' and associate it with the current document.
  create: ScenarioInput

  # Connect a document of type 'Scenario' with the current document using its ID.
  connect: ID
}

scalar Time

type Query {
  # Find a document from the collection of 'Speech' by its id.
  findSpeechByID(
    # The 'Speech' document's ID
    id: ID!
  ): Speech

  # Find a document from the collection of 'Scenario' by its id.
  findScenarioByID(
    # The 'Scenario' document's ID
    id: ID!
  ): Scenario
  allActiveScenarios(
    # The number of items to return per page.
    _size: Int

    # The pagination cursor.
    _cursor: String
    active: Boolean!
  ): ScenarioPage!
  allScenarios(
    # The number of items to return per page.
    _size: Int

    # The pagination cursor.
    _cursor: String
  ): ScenarioPage!
}

type Scenario {
  author: String
  description: String

  # The document's ID.
  _id: ID!
  speeches(
    # The number of items to return per page.
    _size: Int

    # The pagination cursor.
    _cursor: String
  ): SpeechPage!
  roles: [String]
  title: String!
  active: Boolean

  # The document's timestamp.
  _ts: Long!
}

# The pagination object for elements of type 'Scenario'.
type ScenarioPage {
  # The elements of type 'Scenario' in this page.
  data: [Scenario]!

  # A cursor for elements coming after the current page.
  after: String

  # A cursor for elements coming before the current page.
  before: String
}

type Speech {
  scenario: Scenario!

  # The document's ID.
  _id: ID!
  text: String!
  audios: [String!]

  # The document's timestamp.
  _ts: Long!
}

# The pagination object for elements of type 'Speech'.
type SpeechPage {
  # The elements of type 'Speech' in this page.
  data: [Speech]!

  # A cursor for elements coming after the current page.
  after: String

  # A cursor for elements coming before the current page.
  before: String
}

# The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long
